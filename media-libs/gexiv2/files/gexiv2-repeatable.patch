diff -uNr gexiv2.old3/gexiv2-metadata.cpp gexiv2/gexiv2-metadata.cpp
--- gexiv2.old3/gexiv2-metadata.cpp	2013-05-05 22:37:20.000000000 +0200
+++ gexiv2/gexiv2-metadata.cpp	2013-05-10 18:15:00.016304001 +0200
@@ -916,4 +916,13 @@
     return NULL;
 }
 
+gboolean gexiv2_metadata_is_tag_repeatable (const gchar *tag) {
+    g_return_val_if_fail(tag != NULL, NULL);
+    
+    if (gexiv2_metadata_is_iptc_tag(tag))
+        return gexiv2_metadata_is_iptc_tag_repeatable(tag);
+    
+    return FALSE;
+}
+
 G_END_DECLS
diff -uNr gexiv2.old3/gexiv2-metadata.h gexiv2/gexiv2-metadata.h
--- gexiv2.old3/gexiv2-metadata.h	2013-05-05 22:36:39.000000000 +0200
+++ gexiv2/gexiv2-metadata.h	2013-05-10 18:14:53.530254783 +0200
@@ -230,6 +230,14 @@
  */
 const gchar*	gexiv2_metadata_get_tag_type	(const gchar *tag);
 
+/**
+ * gexiv2_metadata_is_tag_repeatable:
+ * @tag: Name of the tag who's repatable abbility you want
+ *
+ * Returns: (transfer none) (allow-none): Is tag repeatable
+ */
+gboolean    gexiv2_metadata_is_tag_repeatable    (const gchar *tag);
+
 
 /**
  * EXIF functions
diff -uNr gexiv2.old3/gexiv2-metadata-iptc.cpp gexiv2/gexiv2-metadata-iptc.cpp
--- gexiv2.old3/gexiv2-metadata-iptc.cpp	2013-05-05 18:27:37.000000000 +0200
+++ gexiv2/gexiv2-metadata-iptc.cpp	2013-05-10 18:12:17.522198894 +0200
@@ -275,4 +275,17 @@
     return NULL;
 }
 
+gboolean gexiv2_metadata_is_iptc_tag_repeatable (const gchar* tag) {
+    g_return_val_if_fail(tag != NULL, NULL);
+    
+    try {
+        Exiv2::IptcKey key (tag);
+        return Exiv2::IptcDataSets::dataSetRepeatable(key.tag(), key.record());
+    } catch (Exiv2::Error& e) {
+        LOG_ERROR(e);
+    }
+    
+    return FALSE;
+}
+
 G_END_DECLS
diff -uNr gexiv2.old3/gexiv2-metadata-private.h gexiv2/gexiv2-metadata-private.h
--- gexiv2.old3/gexiv2-metadata-private.h	2013-05-05 22:37:43.000000000 +0200
+++ gexiv2/gexiv2-metadata-private.h	2013-05-10 18:13:05.880535832 +0200
@@ -81,6 +81,7 @@
 const gchar*	gexiv2_metadata_get_iptc_tag_label	(const gchar* tag);
 const gchar*	gexiv2_metadata_get_iptc_tag_description	(const gchar* tag);
 const gchar*	gexiv2_metadata_get_iptc_tag_type	(const gchar* tag);
+gboolean        gexiv2_metadata_is_iptc_tag_repeatable   (const gchar* tag);
 
 
 G_END_DECLS
